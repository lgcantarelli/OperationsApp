/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 *
 * @author Matheus Soares
 */
package GUI;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import operationsapp.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.OK_CANCEL_OPTION;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author matheus
 */
public class GUIHome extends javax.swing.JFrame {

    /**
     * Creates new form GUIHome
     */
    public GUIHome() {
        initComponents();
        this.user = new User();
        ////////////////////////////////////////////////////////////////////
        ////////////////////TESTE/////////////////////////////////////
        /////////////////////////////////////////////////////////////////
        AddTestes testes = new AddTestes(user);
        updateList();
        balanceUpdate();
        ////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////*/
        id=10;
        category();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIHome().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupMoreInf = new javax.swing.ButtonGroup();
        expFilExp = new javax.swing.JFileChooser();
        buttonGroupAdd = new javax.swing.ButtonGroup();
        buttonGroupFiltExt = new javax.swing.ButtonGroup();
        buttonGroupFiltGra = new javax.swing.ButtonGroup();
        panelInf = new javax.swing.JTabbedPane();
        panelExtract = new javax.swing.JPanel();
        labelChaRev = new javax.swing.JLabel();
        separatorExtract = new javax.swing.JSeparator();
        labelBalance = new javax.swing.JLabel();
        valueBalance = new javax.swing.JLabel();
        PanelFiltExtr = new javax.swing.JPanel();
        checkCharExtFilt = new javax.swing.JCheckBox();
        chekRevExtFilt = new javax.swing.JCheckBox();
        checDateExtFilt = new javax.swing.JCheckBox();
        texDateFromExtFilt = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("##/##/####");
            texDateFromExtFilt = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        labeDateSepExtFilt = new javax.swing.JLabel();
        texDateUntilExtFilt = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("##/##/####");
            texDateUntilExtFilt = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        buttonSelecExtFilt = new javax.swing.JButton();
        buttonClearFilter = new javax.swing.JButton();
        PanelShowExtract = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableExtract = new javax.swing.JTable();
        panelReport = new javax.swing.JPanel();
        panelAnualGraph = new javax.swing.JPanel();
        labelGrapAnual = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        PanelFiltExtr1 = new javax.swing.JPanel();
        checkCharGraFilt = new javax.swing.JCheckBox();
        chekRevGraFilt = new javax.swing.JCheckBox();
        checDateGraFilt = new javax.swing.JCheckBox();
        texDateFromGraFilt = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("##/##/####");
            texDateFromGraFilt = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        labeDateSepGraFilt = new javax.swing.JLabel();
        texDateUntilGraFilt = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("##/##/####");
            texDateUntilGraFilt = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        buttonSelecGraFilt = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        panelPieGraph = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        panelAdd = new javax.swing.JPanel();
        labelDate = new javax.swing.JLabel();
        labelValue = new javax.swing.JLabel();
        addValue = new javax.swing.JTextField();
        selectCategory = new javax.swing.JComboBox<>();
        buttonAdd = new javax.swing.JButton();
        radioButtonCharge = new javax.swing.JRadioButton();
        radioButtonRevenue = new javax.swing.JRadioButton();
        labelCategory = new javax.swing.JLabel();
        addDate = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("##/##/####");
            addDate = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        addTitle = new javax.swing.JTextField();
        labelTitle = new javax.swing.JLabel();
        buttonExp = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        expFilExp.setAcceptAllFileFilterUsed(false);
        expFilExp.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        panelInf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                panelInfFocusGained(evt);
            }
        });

        labelChaRev.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelChaRev.setText("Extrato");

        labelBalance.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        labelBalance.setText("Saldo");

        valueBalance.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        buttonGroupFiltExt.add(checkCharExtFilt);
        checkCharExtFilt.setText("Despesas");

        buttonGroupFiltExt.add(chekRevExtFilt);
        chekRevExtFilt.setText("Receitas");

        texDateFromExtFilt.setEnabled(false);

        labeDateSepExtFilt.setText("-");

        texDateUntilExtFilt.setEnabled(false);

        buttonSelecExtFilt.setText("Filtro");

        buttonClearFilter.setText("Limpar");

        javax.swing.GroupLayout PanelFiltExtrLayout = new javax.swing.GroupLayout(PanelFiltExtr);
        PanelFiltExtr.setLayout(PanelFiltExtrLayout);
        PanelFiltExtrLayout.setHorizontalGroup(
            PanelFiltExtrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFiltExtrLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkCharExtFilt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chekRevExtFilt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checDateExtFilt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(texDateFromExtFilt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labeDateSepExtFilt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(texDateUntilExtFilt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonSelecExtFilt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonClearFilter)
                .addGap(18, 18, 18))
        );
        PanelFiltExtrLayout.setVerticalGroup(
            PanelFiltExtrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFiltExtrLayout.createSequentialGroup()
                .addGroup(PanelFiltExtrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelFiltExtrLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(PanelFiltExtrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkCharExtFilt)
                            .addComponent(chekRevExtFilt)
                            .addComponent(checDateExtFilt)))
                    .addGroup(PanelFiltExtrLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelFiltExtrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(texDateFromExtFilt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labeDateSepExtFilt)
                            .addComponent(texDateUntilExtFilt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonSelecExtFilt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonClearFilter))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        checDateExtFilt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(checDateExtFilt.isSelected()){
                    texDateFromExtFilt.setEnabled(true);
                    texDateUntilExtFilt.setEnabled(true);
                }
                else{
                    texDateFromExtFilt.setEnabled(false);
                    texDateUntilExtFilt.setEnabled(false);
                }
            }
        });
        buttonSelecExtFilt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(checkCharExtFilt.isSelected()){
                    if(checDateExtFilt.isSelected()){
                        try{
                            filterExtractChargeDate();}
                        catch(ParseException ex){
                            JOptionPane.showMessageDialog(null, "Erro filtro Despesa Data");}
                    }else{
                        try{
                            filterExtractCharge();}
                        catch(ParseException ex){
                            JOptionPane.showMessageDialog(null, "Erro filtro Despesa");}
                    }
                }else{
                    if(chekRevExtFilt.isSelected()){
                        if(checDateExtFilt.isSelected()){
                            try{
                                filterExtractRevenueDate();}
                            catch(ParseException ex){
                                JOptionPane.showMessageDialog(null, "Erro filtro Receita Data");}
                        }else{
                            try{
                                filterExtractRevenue();}
                            catch(ParseException ex){
                                JOptionPane.showMessageDialog(null, "Erro filtro Receita");}
                        }
                    }else{
                        if(checDateExtFilt.isSelected()){
                            try{
                                filterExtractDate();}
                            catch(ParseException ex){
                                JOptionPane.showMessageDialog(null, "Erro filtro Data");}
                        }else{
                            JOptionPane.showMessageDialog(null, "Selecione um filtro!");
                        }
                    }
                }
            }
        });
        buttonClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateList();
                balanceUpdate();
            }
        });

        tableExtract.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Titulo", "Categoria", "Data", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableExtract);
        tableExtract.getColumnModel().getColumn(0).setPreferredWidth(200);
        tableExtract.getColumnModel().getColumn(1).setPreferredWidth(200);
        tableExtract.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableExtract.getColumnModel().getColumn(3).setPreferredWidth(100);

        javax.swing.GroupLayout PanelShowExtractLayout = new javax.swing.GroupLayout(PanelShowExtract);
        PanelShowExtract.setLayout(PanelShowExtractLayout);
        PanelShowExtractLayout.setHorizontalGroup(
            PanelShowExtractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelShowExtractLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelShowExtractLayout.setVerticalGroup(
            PanelShowExtractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelShowExtractLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout panelExtractLayout = new javax.swing.GroupLayout(panelExtract);
        panelExtract.setLayout(panelExtractLayout);
        panelExtractLayout.setHorizontalGroup(
            panelExtractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelExtractLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelExtractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelExtractLayout.createSequentialGroup()
                        .addComponent(labelChaRev, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addComponent(PanelFiltExtr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelExtractLayout.createSequentialGroup()
                        .addComponent(PanelShowExtract, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(separatorExtract)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelExtractLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(panelExtractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(valueBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelExtractLayout.createSequentialGroup()
                                .addComponent(labelBalance)
                                .addGap(167, 167, 167)))))
                .addContainerGap())
        );
        panelExtractLayout.setVerticalGroup(
            panelExtractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelExtractLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelChaRev, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(PanelFiltExtr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(PanelShowExtract, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(separatorExtract, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );

        valueBalance.setText("R$ " + balance);
        if(balance<0){
            valueBalance.setForeground(Color.red);
        }else if(balance>0){
            valueBalance.setForeground(Color.green);
        }else{
            valueBalance.setForeground(Color.BLACK);
        }

        panelInf.addTab("Extrato", panelExtract);

        panelAnualGraph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelAnualGraphMouseClicked(evt);
            }
        });
        panelAnualGraph.setLayout(new javax.swing.BoxLayout(panelAnualGraph, javax.swing.BoxLayout.LINE_AXIS));

        labelGrapAnual.setText("Anual");
        panelAnualGraph.add(labelGrapAnual);

        buttonGroupFiltGra.add(checkCharGraFilt);
        checkCharGraFilt.setText("Despesas");

        buttonGroupFiltGra.add(chekRevGraFilt);
        chekRevGraFilt.setText("Receitas");

        texDateFromGraFilt.setEnabled(false);

        labeDateSepGraFilt.setText("-");

        texDateUntilGraFilt.setEnabled(false);

        buttonSelecGraFilt.setText("Filtro");

        javax.swing.GroupLayout PanelFiltExtr1Layout = new javax.swing.GroupLayout(PanelFiltExtr1);
        PanelFiltExtr1.setLayout(PanelFiltExtr1Layout);
        PanelFiltExtr1Layout.setHorizontalGroup(
            PanelFiltExtr1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFiltExtr1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkCharGraFilt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chekRevGraFilt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checDateGraFilt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(texDateFromGraFilt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labeDateSepGraFilt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(texDateUntilGraFilt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonSelecGraFilt)
                .addContainerGap())
        );
        PanelFiltExtr1Layout.setVerticalGroup(
            PanelFiltExtr1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFiltExtr1Layout.createSequentialGroup()
                .addGroup(PanelFiltExtr1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelFiltExtr1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(PanelFiltExtr1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkCharGraFilt)
                            .addComponent(chekRevGraFilt)
                            .addComponent(checDateGraFilt)))
                    .addGroup(PanelFiltExtr1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelFiltExtr1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(texDateFromGraFilt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labeDateSepGraFilt)
                            .addComponent(texDateUntilGraFilt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonSelecGraFilt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        checDateGraFilt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(checDateGraFilt.isSelected()){
                    texDateFromGraFilt.setEnabled(true);
                    texDateUntilGraFilt.setEnabled(true);
                }
                else{
                    texDateFromGraFilt.setEnabled(false);
                    texDateUntilGraFilt.setEnabled(false);
                }
            }
        });
        buttonSelecGraFilt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(checkCharGraFilt.isSelected()){
                    if(checDateGraFilt.isSelected()){
                        filtGraChargDate();
                    }else{
                        filtGraCharg();
                    }
                }else{
                    if(chekRevGraFilt.isSelected()){
                        if(checDateGraFilt.isSelected()){
                            filtGraRevDate();
                        }else{
                            filtGraRev();
                        }
                    }else{
                        if(checDateGraFilt.isSelected()){
                            filtGraDate();
                        }else{
                            JOptionPane.showMessageDialog(null, "Selecione um filtro!");
                        }
                    }
                }
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Graficos");

        javax.swing.GroupLayout panelPieGraphLayout = new javax.swing.GroupLayout(panelPieGraph);
        panelPieGraph.setLayout(panelPieGraphLayout);
        panelPieGraphLayout.setHorizontalGroup(
            panelPieGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        panelPieGraphLayout.setVerticalGroup(
            panelPieGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 347, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelPieGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelPieGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 349, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 359, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelFiltExtr1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PanelFiltExtr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 10, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelReportLayout = new javax.swing.GroupLayout(panelReport);
        panelReport.setLayout(panelReportLayout);
        panelReportLayout.setHorizontalGroup(
            panelReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelReportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panelReportLayout.createSequentialGroup()
                .addComponent(panelAnualGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelReportLayout.setVerticalGroup(
            panelReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAnualGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
        );

        panelInf.addTab("Graficos", panelReport);

        labelDate.setText("Data");

        labelValue.setText("Valor");

        buttonAdd.setText("Adicionar");
        buttonAdd.setBorder(null);
        buttonAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        buttonGroupAdd.add(radioButtonCharge);
        radioButtonCharge.setText("Despesa");

        buttonGroupAdd.add(radioButtonRevenue);
        radioButtonRevenue.setText("Receita");

        labelCategory.setText("Categoria");

        labelTitle.setText("Titulo");

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addTitle)
                    .addComponent(buttonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addValue)
                    .addComponent(selectCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addDate)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(radioButtonCharge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(radioButtonRevenue))
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelDate)
                            .addComponent(labelValue, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelCategory)
                            .addComponent(labelTitle))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioButtonCharge)
                    .addComponent(radioButtonRevenue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelValue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        if(radioButtonCharge.isSelected() == false && radioButtonRevenue.isSelected() == false ){
            selectCategory.setEnabled(false);
        }
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(addValue.getText().trim().equals("")){
                    JOptionPane.showMessageDialog(null, "Campo Valor vazio");
                }else if(addDate.getText().trim().equals("")){
                    JOptionPane.showMessageDialog(null, "Campo Data vazio");
                }else{
                    if(radioButtonCharge.isSelected() == true){
                        int confirmBox = JOptionPane.showConfirmDialog(null, "salvar DESPESA",null,OK_CANCEL_OPTION);
                        if(confirmBox == JOptionPane.OK_OPTION){
                            buttonConfirmAddChar();
                        }
                    }else if(radioButtonRevenue.isSelected() == true){
                        int confirmBox = JOptionPane.showConfirmDialog(null, "salvar Receita",null,OK_CANCEL_OPTION);
                        if(confirmBox == JOptionPane.OK_OPTION){
                            buttonConfirmAddRev();
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "Seleciona o tipo de transação");
                    }
                }
            }
        });
        radioButtonCharge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCategory.removeAllItems();
                List<String> list = getlistChargeCategory();
                for(int i=0;i<list.size();i++){
                    selectCategory.addItem(list.get(i));
                }
                selectCategory.setEnabled(true);
            }
        });
        radioButtonRevenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCategory.removeAllItems();
                List<String> list = getlistRevenueCategory();
                for(int i=0;i<list.size();i++){
                    selectCategory.addItem(list.get(i));
                }

                selectCategory.setEnabled(true);
            }
        });

        buttonExp.setText("Exportar");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(buttonExp)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInf)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelInf)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(panelAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonExp)
                .addGap(102, 102, 102))
        );

        buttonExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JOptionPane.showMessageDialog(null, "Arquivo salvo em: ");
            }
        });

        setSize(new java.awt.Dimension(948, 717));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
   
    private void addValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addValueActionPerformed
    
    /**
     * Adicionar nova Receita
     */
    private void buttonConfirmAddRev(){
        id += 1;
        double value = Double.parseDouble(addValue.getText());
        Date date = formatDate();
        RevenueCategory category = listRevenueCategory.get(selectCategory.getSelectedIndex());
        Revenue revenue = new Revenue(id,value,addTitle.getText(),date,category);
        user.add_revenue(revenue);
        balanceUpdate();
        updateList();
        addValue.setText(null);
        addDate.setText(null);
        addTitle.setText(null);
        selectCategory.removeAllItems();
        selectCategory.setEnabled(false);
        buttonGroupAdd.clearSelection();
    }
    
    /**
     * Adicionar nova Despesa
     */
    private void buttonConfirmAddChar(){
        id += 1;
        double value = Double.parseDouble(addValue.getText());
        Date date = formatDate();
        ChargeCategory category = listChargeCategory.get(selectCategory.getSelectedIndex());
        Charge charge = new Charge(id,value, addTitle.getText(),date , category);
        user.add_charge(charge);
        balanceUpdate();
        updateList();
        addValue.setText(null);
        addDate.setText(null);
        addTitle.setText(null);
        selectCategory.removeAllItems();
        selectCategory.setEnabled(false);
        buttonGroupAdd.clearSelection();
    }
    
    /**
     * Atualiza tabela Extrato
     */
    public void updateList(){
        limparTabela();
        for(int i=0;i<user.getOperations().size();i++){
            String[] add = new String[4];
            add[0]=user.get_operation(i).getTitle();
            if(user.get_operation(i).getType()==1){
                Revenue op = (Revenue) user.get_operation(i);
                add[1]=op.getCategory().getName();}
            else{Charge op=(Charge) user.get_operation(i);
                add[1]=op.getCategory().getName();}
                String dateString = formatDate(user.get_operation(i).getDatetime());
                add[2] = dateString;
                add[3]=String.valueOf(user.get_operation(i).getValue());
                updateListExt(add);
        }
        balanceUpdate();
    }
    
    /**
     * Formata string em date
     * 
     * @return Date
     */
    public Date formatDate(){
        DateFormat format = DateFormat.getDateInstance();
        String textDate = addDate.getText();
        Date date = null ;
        try {  
            date = format.parse(textDate);
        } catch (ParseException ex) {
           JOptionPane.showMessageDialog(null, "Informe um data no fomato DD/MM/AA");
        }
        return date;
    }
    
    private void panelInfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelInfFocusGained
        buildAnualChart();
        filtGraAll();
    }//GEN-LAST:event_panelInfFocusGained

    private void panelAnualGraphMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelAnualGraphMouseClicked
        buildAnualChart();
        filtGraAll();
    }//GEN-LAST:event_panelAnualGraphMouseClicked

    private void panelPieGraphMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelPieGraphMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelPieGraphMouseClicked

    /**
     * Definição das categorias
     */
    public void category(){
        Revenue revenue;
        Charge charge;
        listChargeCategory = new ArrayList();    
        ChargeCategory chargeCategory0=new ChargeCategory(0,"Supermercado");
        listChargeCategory.add(chargeCategory0);
        ChargeCategory chargeCategory1=new ChargeCategory(1,"Aluguel");
        listChargeCategory.add(chargeCategory1);
        ChargeCategory chargeCategory2=new ChargeCategory(2,"Luz");
        listChargeCategory.add(chargeCategory2);
        ChargeCategory chargeCategory3=new ChargeCategory(3,"Água");
        listChargeCategory.add(chargeCategory3);
        ChargeCategory chargeCategory4=new ChargeCategory(4,"Telefone");
        listChargeCategory.add(chargeCategory4);
        ChargeCategory chargeCategory5=new ChargeCategory(5,"Internet");
        listChargeCategory.add(chargeCategory5);
        ChargeCategory chargeCategory6=new ChargeCategory(6,"Celular");
        listChargeCategory.add(chargeCategory6);
        ChargeCategory chargeCategory7 = new ChargeCategory(7,"Outro");
        listChargeCategory.add(chargeCategory7);
        
        listRevenueCategory = new ArrayList();
        RevenueCategory revenueCategory0 = new RevenueCategory(0,"Bolsa");
        listRevenueCategory.add(revenueCategory0);
        RevenueCategory revenueCategory1 = new RevenueCategory(0,"Freelance");
        listRevenueCategory.add(revenueCategory1);
        RevenueCategory revenueCategory2 = new RevenueCategory(0,"Salário");
        listRevenueCategory.add(revenueCategory2);
        RevenueCategory revenueCategory3 = new RevenueCategory(0,"Outros");
        listRevenueCategory.add(revenueCategory3);
    }
    
    /**
     * Cria lista com categorias de receita
     * 
     * @return List<String>
     */
    public List<String> getlistRevenueCategory(){
        List<String> listRevCatList = new ArrayList();
        for(int i=0;i<listRevenueCategory.size();i++){
            listRevCatList.add(listRevenueCategory.get(i).getName());
        }
        return listRevCatList;
    }
    
    /**
     * Cria lista com categorias de despesa
     * 
     * @return List<String>
     */
    public List<String> getlistChargeCategory(){
        List<String> listChaCatList = new ArrayList();
        for(int i=0;i<listChargeCategory.size();i++){
            listChaCatList.add(listChargeCategory.get(i).getName());
        }
        return listChaCatList;
    }
   
    /**
     * Atualização do valor do Saldo 
     */
    public void balanceUpdate(){
        DecimalFormat df = new DecimalFormat("#,###.00");
        balance = user.get_balance();
        valueBalance.setText("R$ " + df.format(balance));
        if(balance<0){
            valueBalance.setForeground(Color.red);
        }else if(balance>0){
            valueBalance.setForeground(Color.green);
        }else{
            valueBalance.setForeground(Color.BLACK);
        }
    }


    /**
     * Chamada de filtro para extrato de Despesa e Data
     */
    public void filterExtractChargeDate() throws ParseException{
        if(texDateFromExtFilt.getText().trim().equals("") || texDateUntilExtFilt.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo de data!");
        }else{
            limparTabela();
            String textDatefrom = texDateFromExtFilt.getText();
            String textDateUntil = texDateUntilExtFilt.getText();
            try {
                DateFormat format = DateFormat.getDateInstance();
                Date datefrom;
                datefrom = format.parse(textDatefrom);
                Date dateUntil;
                dateUntil = format.parse(textDateUntil);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null,"Informe a data corretamente!");
            }
            //
            List<Operation> listFiltred = user.getFiltredList(textDatefrom, textDateUntil, false, true);
            String[] add = new String[4];
            Charge op;
            limparTabela();
            for(int index=0; index<listFiltred.size();index++){
                op = (Charge) listFiltred.get(index);
                add[0]=listFiltred.get(index).getTitle();
                System.out.print(op.getCategory().getName());
                add[1]=op.getCategory().getName();
                String dateString = formatDate(listFiltred.get(index).getDatetime());
                add[2] = dateString;
                add[3]=String.valueOf(listFiltred.get(index).getValue());
                updateListExt(add);
            }
            buttonGroupFiltExt.clearSelection();
            checDateExtFilt.setSelected(false);
            texDateFromExtFilt.setText("");
            texDateUntilExtFilt.setText("");
            
        }
    }

    /**
     * Chamada de filtro para extrato de Despesa
     */
    public void filterExtractCharge() throws ParseException{
        List<Operation> listFiltred = user.getFiltredList("01/01/1900", "01/01/2999", false, true);
        String[] add = new String[4];
        Charge op;
        limparTabela();
        add(listFiltred,add,true);
        buttonGroupFiltExt.clearSelection();
    }
    
    private void limparTabela() {
        while (tableExtract.getRowCount() > 0) {
            DefaultTableModel dm = (DefaultTableModel) tableExtract.getModel();
            dm.getDataVector().removeAllElements();
        }
    }
    
    /**
     * Formata date em String
     * 
     * @param date
     * @return String
     */
    public String formatDate(Date date){
        String dateString;
        String year;
        String day;
        String month;
        if(date.getYear()>=100)year = String.valueOf((date.getYear())-100);
        else year = String.valueOf(date.getYear());
        
        if(date.getDate()<10)day = "0"+String.valueOf(date.getDate()-1);
        else day = String.valueOf(date.getDate());
        
        if(date.getMonth()<9)month = "0"+String.valueOf(date.getMonth()+1);
        else month = String.valueOf(date.getMonth()+1);
        
        dateString=day+"/"+month+"/"+year;
        
        return dateString;
    }
    /**
     * Chamada de filtro para extrato de Receita e data
     */
    public void filterExtractRevenueDate() throws ParseException{
        if(texDateFromExtFilt.getText().trim().equals("") || texDateUntilExtFilt.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo de data!");
        }
        else{
            limparTabela();
            String textDatefrom = texDateFromExtFilt.getText();
            String textDateUntil = texDateUntilExtFilt.getText();
            List<Operation> listFiltred = user.getFiltredList(textDatefrom, textDateUntil, true, false);
            String[] add = new String[4];
            Charge op;
            limparTabela();
            add(listFiltred,add,false);
            buttonGroupFiltExt.clearSelection();
            checDateExtFilt.setSelected(false);
            texDateFromExtFilt.setText("");
            texDateUntilExtFilt.setText("");

        }
    }
    public void add(List<Operation> listFiltred,String[] add,boolean charge){
        for(int index=0; index<listFiltred.size();index++){
        if(charge ==true){
            Charge op=(Charge) listFiltred.get(index);
                add[1]=op.getCategory().getName();
        }
        else{Revenue op = (Revenue) listFiltred.get(index);
                add[1]=op.getCategory().getName();}
                add[0]=listFiltred.get(index).getTitle();
                String dateString = formatDate(listFiltred.get(index).getDatetime());
                add[2] = dateString;
                add[3]=String.valueOf(listFiltred.get(index).getValue());
                updateListExt(add);
            }
    }
    /**
     * Chamada de filtro para extrato de Receita
     */
    public void filterExtractRevenue() throws ParseException{
        //
        List<Operation> listFiltred = user.getFiltredList("01/01/1900", "01/01/2999", true, false);
        String[] add = new String[4];
        Revenue op; 
        limparTabela();
        add(listFiltred,add,false);
        buttonGroupFiltExt.clearSelection();
    }

    /**
     * Chamada de filtro para extrato de Data
     */
    public void filterExtractDate() throws ParseException{
        if(texDateFromExtFilt.getText().trim().equals("") || texDateUntilExtFilt.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo de data!");
        }else{
            limparTabela();
            String textDatefrom = texDateFromExtFilt.getText();
            String textDateUntil = texDateUntilExtFilt.getText();
            try {
                DateFormat format = DateFormat.getDateInstance();
                Date datefrom;
                datefrom = format.parse(textDatefrom);
                Date dateUntil;
                dateUntil = format.parse(textDateUntil);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null,"Informe a data corretamente!");
            }
                //
            List<Operation> listFiltred = user.getFiltredList(textDatefrom, textDateUntil, false, false);
            String[] add = new String[4];
            Charge op;
            limparTabela();
            for(int index=0; index<listFiltred.size();index++){
                op = (Charge) listFiltred.get(index);
                add[0]=listFiltred.get(index).getTitle();
                System.out.print(op.getCategory().getName());
                add[1]=op.getCategory().getName();
                String dateString = formatDate(listFiltred.get(index).getDatetime());
                //add[2]=listFiltred.get(index).getDatetime().toString();
                add[2] = dateString;
                add[3]=String.valueOf(listFiltred.get(index).getValue());
                updateListExt(add);
            }
            checDateExtFilt.setSelected(false);
            texDateFromExtFilt.setText("");
            texDateUntilExtFilt.setText("");
            
        }
    }

    /**
     * Chamada de filtro para grafico com Despesa e data
     */
    public void filtGraChargDate(){
        if(texDateFromGraFilt.getText().trim().equals("") || texDateUntilGraFilt.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo de data!");
        }else{
            limparTabela();
            try {
                DateFormat format = DateFormat.getDateInstance();
                String textDatefrom = texDateFromGraFilt.getText();
                Date datefrom;
                datefrom = format.parse(textDatefrom);
                String textDateUntil = texDateUntilGraFilt.getText();
                Date dateUntil;
                dateUntil = format.parse(textDateUntil);
                double[] data=user.return_pizza_data(textDatefrom, textDateUntil, false, true);
                buildPieChart(data);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null,"Informe a data corretamente!");
            }
            
            ///
            
            buttonGroupFiltGra.clearSelection();
            checDateGraFilt.setSelected(false);
            texDateFromGraFilt.setText("");
            texDateUntilGraFilt.setText("");
        }
    }

    /**
     * Chamada de filtro para grafico de Despesa
     */
    public void filtGraCharg(){
        
        try {
            double data[]= user.return_pizza_data("", "", false, true);
            buildPieChart(data);
        } catch (ParseException ex) {
            Logger.getLogger(GUIHome.class.getName()).log(Level.SEVERE, null, ex);
        }
        //
        buttonGroupFiltGra.clearSelection();        
    }
    
    
    public void filtGraAll(){
        try {
            double data[]= user.return_pizza_data("", "", true, true);
            buildPieChart(data);
        } catch (ParseException ex) {
            Logger.getLogger(GUIHome.class.getName()).log(Level.SEVERE, null, ex);
        }
        buttonGroupFiltGra.clearSelection();
    }

    /**
     * Chamada de filtro para graficos de Receita e data
     */
    public void filtGraRevDate(){
        if(texDateFromGraFilt.getText().trim().equals("") || texDateUntilGraFilt.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo de data!");
        }else{
            try {
                DateFormat format = DateFormat.getDateInstance();
                String textDatefrom = texDateFromGraFilt.getText();
                Date datefrom;
                datefrom = format.parse(textDatefrom);
                String textDateUntil = texDateUntilGraFilt.getText();
                Date dateUntil;
                dateUntil = format.parse(textDateUntil);
                double[] data=user.return_pizza_data(textDatefrom, textDateUntil, true, false);
                buildPieChart(data);
                //
                buttonGroupFiltGra.clearSelection();
                checDateGraFilt.setSelected(false);
                texDateFromGraFilt.setText("");
                texDateUntilGraFilt.setText("");
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null,"Informe a data corretamente!");
            }
        }
    }

    /**
     * Chamade de filtro para grafico de Receita
     */
    public void filtGraRev(){
        
        try {
            double data[]=user.return_pizza_data("", "",true, false);
            buildPieChart(data);
        } catch (ParseException ex) {
            Logger.getLogger(GUIHome.class.getName()).log(Level.SEVERE, null, ex);
        }
        //
        buttonGroupFiltGra.clearSelection();
    }

    /**
     * Chamada de filtro para grafico de Data
     */
    public void filtGraDate(){
        if(texDateFromGraFilt.getText().trim().equals("") || texDateUntilGraFilt.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo de data!");
        }else{
            try {
                DateFormat format = DateFormat.getDateInstance();
                String textDatefrom = texDateFromGraFilt.getText();
                Date datefrom;
                datefrom = format.parse(textDatefrom);
                String textDateUntil = texDateUntilGraFilt.getText();
                Date dateUntil;
                dateUntil = format.parse(textDateUntil);
                double[] data=user.return_pizza_data(textDatefrom, textDateUntil, true, true);
                buildPieChart(data);
                //
                checDateGraFilt.setSelected(false);
                texDateFromGraFilt.setText("");
                texDateUntilGraFilt.setText("");
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null,"Informe a data corretamente!");
            }
        }
    }
    
    public void updateListExt(String[] add){

        DefaultTableModel model = (DefaultTableModel) tableExtract.getModel();  
        TableCellRenderer tcr = new Colorir();
        TableColumn column =  tableExtract.getColumnModel().getColumn(3);
        column.setCellRenderer(tcr);
        model.addRow(add);
        column.setCellRenderer(tcr);  
    }

    public void buildAnualChart() {
        DefaultCategoryDataset data = new DefaultCategoryDataset();
        double [][] operationsData = user.return_line_data();
         
       for (int i = -11; i <= 0; i++) {
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(new Date());
            calendar.add(Calendar.MONTH, i);
            
            String month = new SimpleDateFormat("MMM").format(calendar.getTime());
            int monthNumber = Math.abs(i);
            
            data.addValue(operationsData[monthNumber][0], "Receita", month);
            data.addValue(operationsData[monthNumber][1], "Custo", month);
            data.addValue(operationsData[monthNumber][2], "Saldo", month);
        }

        JFreeChart chart = ChartFactory.createLineChart(
            "Últimos 12 meses",
            "Meses",
            "R$",
            data,
            PlotOrientation.VERTICAL,
            true, // legend?
            true, // tooltips?
            false // URLs?
        );

        ChartFrame frame = new ChartFrame("My chart", chart);
        frame.pack();
 
        panelAnualGraph.removeAll();
        panelAnualGraph.setPreferredSize(new Dimension(720, 0));
        panelAnualGraph.add(frame.getChartPanel(), BorderLayout.CENTER);
        panelAnualGraph.validate();
   }
    
    
    public void buildPieChart(double data[]) {
        DefaultPieDataset dataset = new DefaultPieDataset();
        if(data[1]!=0){
            dataset.setValue("Supermercado",data[1]);
        }
        if(data[2]!=0){
            dataset.setValue("Aluguel",data[2]);
        }
        if(data[3]!=0){
            dataset.setValue("Luz",data[3]);
        }
        if(data[4]!=0){
            dataset.setValue("Agua",data[4]);
        }
        if(data[5]!=0){
            dataset.setValue("Telefone",data[5]);
        }
        if(data[6]!=0){
            dataset.setValue("Internet",data[6]);
        }
        if(data[7]!=0){
            dataset.setValue("Celular",data[7]);
        }
        if(data[8]!=0){
            dataset.setValue("Salario",data[8]);
        }
        if(data[9]!=0){
            dataset.setValue("Bolsa",data[9]);
        }
        if(data[10]!=0){
            dataset.setValue("Freelance",data[10]);
        }
        if(data[11]!=0){
            dataset.setValue("Supermercado",data[11]);
        }
    
        JFreeChart chart = ChartFactory.createPieChart(
            "Custos por categoria",  // chart title
            dataset,            // data
            false,              // no legend
            true,               // tooltips
            false               // no URL generation
        );
        
        ChartFrame frame = new ChartFrame("Pie Chart", chart);
        frame.pack();
        frame.setSize(panelPieGraph.getPreferredSize());
        
        panelPieGraph.removeAll();
        //panelPieGraph.setPreferredSize(new Dimension(350,350));
        panelPieGraph.add(frame.getChartPanel(), BorderLayout.CENTER);
        panelPieGraph.validate();
    }
    
    private DefaultListModel listModel;
    private User user;
    private double balance;
    int id;
    List<RevenueCategory> listRevenueCategory;
    List<ChargeCategory> listChargeCategory;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelFiltExtr;
    private javax.swing.JPanel PanelFiltExtr1;
    private javax.swing.JPanel PanelShowExtract;
    private javax.swing.JTextField addDate;
    private javax.swing.JTextField addTitle;
    private javax.swing.JTextField addValue;
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonClearFilter;
    private javax.swing.JButton buttonExp;
    private javax.swing.ButtonGroup buttonGroupAdd;
    private javax.swing.ButtonGroup buttonGroupFiltExt;
    private javax.swing.ButtonGroup buttonGroupFiltGra;
    private javax.swing.ButtonGroup buttonGroupMoreInf;
    private javax.swing.JButton buttonSelecExtFilt;
    private javax.swing.JButton buttonSelecGraFilt;
    private javax.swing.JCheckBox checDateExtFilt;
    private javax.swing.JCheckBox checDateGraFilt;
    private javax.swing.JCheckBox checkCharExtFilt;
    private javax.swing.JCheckBox checkCharGraFilt;
    private javax.swing.JCheckBox chekRevExtFilt;
    private javax.swing.JCheckBox chekRevGraFilt;
    private javax.swing.JFileChooser expFilExp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labeDateSepExtFilt;
    private javax.swing.JLabel labeDateSepGraFilt;
    private javax.swing.JLabel labelBalance;
    private javax.swing.JLabel labelCategory;
    private javax.swing.JLabel labelChaRev;
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelGrapAnual;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelValue;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelAnualGraph;
    private javax.swing.JPanel panelExtract;
    private javax.swing.JTabbedPane panelInf;
    private javax.swing.JPanel panelPieGraph;
    private javax.swing.JPanel panelReport;
    private javax.swing.JRadioButton radioButtonCharge;
    private javax.swing.JRadioButton radioButtonRevenue;
    private javax.swing.JComboBox<String> selectCategory;
    private javax.swing.JSeparator separatorExtract;
    private javax.swing.JTable tableExtract;
    private javax.swing.JTextField texDateFromExtFilt;
    private javax.swing.JTextField texDateFromGraFilt;
    private javax.swing.JTextField texDateUntilExtFilt;
    private javax.swing.JTextField texDateUntilGraFilt;
    private javax.swing.JLabel valueBalance;
    // End of variables declaration//GEN-END:variables
}
